{
  "hash": "6276a7a011f6ac81999130af0d8520f5",
  "result": {
    "markdown": "---\ntitle: \"Akademisches Schreiben mit Github und (R)markdown/Bookdown/Quarto\"\ndate: \"2023-03-07\"\ntags: ['Rmarkdown', 'R', 'Academia']\nformat: hugo-md\n---\n\n\n`git` und die darauf basierenden Hosting-Services Github und Gitlab sind Tools zur Versionskontrolle, die im Entwicklungskontext den De-Facto Industriestandard darstellen.\nDer Grund für diesen Erfolg ist dabei die Baum-artige Struktur in der Änderungen am Code-Stamm getracked und nachvollzogen werden können.\nÜber verschiedene \"branches\" können außerdem Änderungen gebaut, erweitert und getestet werden, bevor sie in den zentralen Codestamm (bei Github der \"main\"-branch) \"gemerged\" werden.\nDabei ist es generell möglich, Änderungen in allen möglichen Dateiformaten zu tracken, so richtig sinnvoll sind Änderungen und Änderungsabschnitte aber vor allem in Klartextformaten ohne Serialisierung verständlich.\nTextfiles müssen aber ja nicht notwendigerweise nur Code enthalten.\nMit der wachsenden Beliebtheit von Rmarkdown und neuerdings Quarto geht (zumindest in der R-Community) der Trend zum Verfassen von Texten in auf markdown basierenden Formaten, die mit Hilfe von Pandoc in andere Formate kompiliert werden können.\nDa diese Formate in einfachen Textfiles abgespeichert werden, können so die Vorteile von git zum Tragen kommen.\nEin workflow zum gemeinsamen Erstellen von Texten wie er zum Beispiel beim Schreiben gemeinsamer Publikationen nötig ist, gestützt auf eins der populären markdown Formate und git, könnte eine echte Alternative zur Co-Autorenschaft in Word sein.\nDabei hat der vorgeschlagene Workflow die folgenden Vorteile:\n\n* Quarto/Rmarkdown^[ab hier wird mit Quarto beides gemeint, solange nicht anders angemerkt] haben auch ohne Kombination mit git Vorteile beim Erstellen und Einbinden von Grafiken, Tabellen und statistischen Ergebnissen\n* mit git kommt ein Versionsmanagement dazu, dass Änderungen verfolgbar und auch zurückziehbar macht, ohne dass die Festplatte voll von `manuskript_final_v1_v3.docx` etc. wird\n* die gesamte Änderungsgeschichte ließe sich publizieren, was aus Gesichtspunkten offener Wissenschaft attraktiv sein kann. Muss aber nicht.\n* mit Github/Gitlab Issues kommt ein ganzer Stack an Projektmanagement-Tools dazu, der optional genutzt werden kann\n* mit Github/Gitlab Action lassen sich Tests und Updates vor oder beim Commit automatisieren\n* das Zusammenarbeiten über Betriebssystem-Grenzen hinweg ist problemlos. Kein Ärger mehr mit verschiedenen Office-Versionen oder Formatierungskonflikten zwischen MS Office und Open Scource Lösungen\n\nDabei sind die Nachteile relativ gering - Quarto ist sehr weit gekommen und unterstützt alle Standard-Anforderungen an akademische Arbeiten - Zitieren, Formatieren und das Nutzen von Latex-Templates ist kein Problem.\nDazu kommt dass zumindest bei der Nutzung von RStudio seit kurzem auch eine WYSIWYG-Lösung zur Texteditirung dazugekommen ist - die Bedienung des Visual Editors sollte Leuten, die an Word gewöhnt sind, keine so große Herausforderunge mehr bereiten wie das Schreiben in reinem `markdown`. \nDer einzige größere Nachteil ist, dass sich der Ablauf zum Kommentieren ändert - dazu kommen wir aber später.\n\n\n### Einrichtung\nUnter Mac und Unix-Distros ist git vorinstalliert, unter Windows muss der Client noch installiert werden:\n[Download git](https://git-scm.com/download/win)\n\nUm Änderungen darzustellen gibt es zwar auch Funktionalität in RStudio, die github Desktop-GUI ist aber auch ganz schick:\n[Download github Desktop](https://desktop.github.com/)\n\nRstudio als IDE bietet sich an, hier wird aber davon ausgegangen, dass die Installation bereits passiert ist.\nAußerdem ist zum Einbinden von Zitationen in Quarto-Texten eine Zotero-Installation mit dem [Better Bibtex](https://retorque.re/zotero-better-bibtex/) Addon zu empfehlen. \nIm visuellen Editor gibt es einen eigenständigen Zitationsmanger mit Zotero-Connection, im Source-Editor habe ich aber bessere Erfahrungen mit dem `citr`-Paket gemacht, das es leider nicht mehr auf Cran aber noch auf [github](https://github.com/crsh/citr) gibt.\nZum Schreiben mit Rmarkdown oder der Erweiterung Bookdwon braucht es nur die entsprechenden R-Pakete, für Quarto is nocht eine eigenständige Quarto-Installation nötig. Die ist [hier](https://quarto.org/docs/get-started/) zu finden.\n\nZuletzt wird ein Github-Repo^[Geht auch mit Gitlab, hier wird aber keine Action zur Erstellung von Issues angeboten, was das Kommentieren von Manuskripten etwas anders gestaltet] benötigt.\n\nZur Einrichtung braucht es erst einen Github-Account, der Rest kann über die Github-Desktop-GUI erledigt werden.\nNach der Anmeldung in der GUI kann dafür einfach wie in @fig-CreateRepo zu sehen auf `File -> New repository` geklickt oder `Strg + N` gedrückt werden.\n\n![Repo erstellen](imgs/create_repo.png){#fig-CreateRepo}\n\nIm sich daraufhin öffnenden Dialog (@fig-repoDialogue) kann das zu erstellende Repo eingerichtet werden.\nNeben Name, Beschreibung und lokalem Speicherort kann hier auch eine Lizenz und ein gitignore-Vorbild angegeben werden. \nDas gitignore-File gibt an, welche Dateien grundsätzlich nicht ins Repo aufgenommen werden sollen - für Projekte wie hier beschrieben bietet sich hier das R-Template an.\nAußerdem \n\n![Einstellungen bei Repoerstellung](imgs/repo_dialogue.png){#fig-repoDialogue}\n\nNach der lokalen Erstellung muss das Repo noch mit einem Github-remote verknüpft werden. Das kann einfach mit \"Publish Repository\" (@fig-publishRepo) geschehen, solange noch kein Repo mit dem entsprechenden Namen existiert.\n\n![Erstellung des Github-Repos](imgs/publish_to_github.png){#fig-publishRepo}\n\nWenn sich nun in Github Web angemeldet wird, müsste das neue repository in der Liste auftauchen.\nNach der o.g. Erstellung können im Repo unter den Einstellungen -> Collaborators noch Coautoren eingeladen werden.\n\nAls Vorbereitung des Erstellens von Issues für Kommentare kann dem Repo noch die [TODO to Issue Action](https://github.com/marketplace/actions/todo-to-issue) hinzugefügt werden. Diese legt automatisch Issues an, wenn in einem Textfile ein TODO-Kommentar angelegt ist.\nZum Einbinden in das Repo muss im Repo ein Ordner namens `.github` und darin einer namens `workflows` angelegt werden.\nIn diesem `workflows`-Ordner wird dann ein YAML file mit dem Namen `TODO.yml` angelegt, das den folgenden Inhalt enthält:\n\n\n::: {.cell}\n\n```{.yaml .cell-code}\nname: \"Run TODO to Issue\"\non: [\"push\"]\njobs:\n    build:\n        runs-on: \"ubuntu-latest\"\n        steps:\n            - uses: \"actions/checkout@v3\"\n            - name: \"TODO to Issue\"\n              uses: \"alstr/todo-to-issue-action@v4\"\n              with:\n                AUTO_ASSIGN: true #Ersteller zuweisen wenn nicht anders angegeben\n                IDENTIFIERS: '[{\"name\": \"COMMENT\", \"labels\": [\"comment\"]}, {\"name\": \"SUGGESTION\", \"labels\": [\"suggestion\"]}]' # Liste mit Standard-Issue-Tags\n```\n:::\n\n\n\nDamit die Action läuft muss die Änderung noch ins Repo gepushed werden. Dazu einmal in Github Dektop committen (@fig-commit) und dann pushen (@fig-push).\n\n\n![Änderungen Committen](imgs/commit.png){#fig-commit}\n\n\n![Änderungen Pushen](imgs/push.png){#fig-push}\n\n\n## Schreiben\n\nUm einen Artikel zu schreiben bietet sich an, entweder bookdown oder quarto zu nutzen. Beide unterstützen das Schreiben eines Übergeordneten Dokuments in einer Reihe von anderen Dokumenten, zum Beispiel aufgesplittet nach Kapiteln.\nDas Aufteilen ist nicht unbedingt nötig, kann aber das Zusammenarbeiten vereinfachen.\nDas Arbeiten mit einem Quarto-Stack hat außerdem den Vorteil, dass Auswertung, Poster, Paper und Präsentation in einem Abwasch erledigt werden können und alles an einer Stelle gesammelt vorliegt.\n\nEin `_quarto.yml`, das  Zweck genutzt wird, könnte wie folgt aussehen:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n````\n```{YAML}\n````\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nproject:\n  output-dir: _output\n  render:\n    - quarto/abstract.qmd\n\ntoc: false\nnumber-sections: false\nbibliography: references.bib\ncsl: quarto/apa.csl\n\ntitle: Testartikel\n\nformat:\n  html:\n    theme: cosmo\n  pdf:\n    documentclass: scrreprt\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n````\n```\n````\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}